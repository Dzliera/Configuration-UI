@using System.Net.Http
@using System.Net.Http.Json
@using ConfigurationUi.Models
@using Newtonsoft.Json.Linq
@inject HttpClient HttpClient;

<MudCard>
    <MudCardHeader>Configuration Editor</MudCardHeader>
    <MudCardContent>
        @foreach (var (key, value) in _schema.Properties)
        {
            <ComponentRouter Token="@_configurationObject[key]" Schema="@value"></ComponentRouter>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled">Save</MudButton>
        <MudButton Variant="Variant.Filled">Discard Changes</MudButton>
    </MudCardActions>
</MudCard>

@code {

    /// <summary>
    /// Url of configurationUI configuration API
    /// </summary>
    [Parameter]
    public string ApiUrl { get; set; } = "/api/configuration-ui/configuration";


    private JObject _configurationObject;
    private JsonSchema4 _schema;


    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var getConfigurationResponse = await HttpClient.GetFromJsonAsync<GetConfigurationResponse>(ApiUrl);
        if (getConfigurationResponse == null)
            throw new InvalidOperationException("Api returned empty body, instead of json object");

        _schema = getConfigurationResponse.Schema;
        _configurationObject = getConfigurationResponse.Configuration;
    }

}