@using Microsoft.AspNetCore.Components.Web
@inherits EditorComponentBase;

<ul class="collection with-header">
    <li class="collection-header">
        <h5>@Key</h5>
        <div>
            <MudIconButton Icon="@Icons.Filled.Add" OnClick="OnAddArrayElemClick"/>
        </div>
    </li>
    @for (var index = 0; index < _array.Count; index++)
    {
        var item = _array[index];
        
        // should copy index before capture, because it's value changes in loop
        var currentIndex = index; 
        
        <li class="collection-item">
            <MudText Class="element-index" Typo="@Typo.h6">@(currentIndex + ". ")</MudText>
            <ComponentRouter Token="@item" Schema="@Schema.Item"/>
            <MudIconButton Icon="@Icons.Filled.Delete" Class="delete-button" 
                           OnClick="@(() => _array.RemoveAt(currentIndex))"/>
        </li>
    }
</ul>


@code {

    private JArray _array;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        if (Schema.Type != JsonObjectType.Array)
        {
            throw new ArgumentException($"Invalid schema type for ArrayEditor. Expected Array, got {Schema.Type}");
        }

        if (Token is not JArray array)
        {
            throw new ArgumentException($"Invalid token, token should be JArray");
        }

        _array = array;
    }

    private void OnAddArrayElemClick(MouseEventArgs args)
    {
        // TODO support adding elems in non empty array
        _array.Add(_array.Last.DeepClone()); 
    }

}